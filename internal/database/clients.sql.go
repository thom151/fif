// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: clients.sql

package database

import (
	"context"
	"database/sql"
)

const createClient = `-- name: CreateClient :one
INSERT INTO clients (id, name, email, phone, address, agent_id)
VALUES(
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)RETURNING id, name, email, phone, address, agent_id, created_at, updated_at
`

type CreateClientParams struct {
	ID      string
	Name    string
	Email   string
	Phone   sql.NullString
	Address sql.NullString
	AgentID string
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Address,
		arg.AgentID,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.AgentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAgentClients = `-- name: GetAgentClients :many
SELECT id, name, email, phone, address, agent_id, created_at, updated_at FROM clients WHERE agent_id = ?
`

func (q *Queries) GetAgentClients(ctx context.Context, agentID string) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, getAgentClients, agentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Address,
			&i.AgentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClientByEmail = `-- name: GetClientByEmail :one
SELECT id, name, email, phone, address, agent_id, created_at, updated_at FROM clients WHERE email = ?
`

func (q *Queries) GetClientByEmail(ctx context.Context, email string) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientByEmail, email)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.AgentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getClientById = `-- name: GetClientById :one
SELECT id, name, email, phone, address, agent_id, created_at, updated_at FROM clients WHERE id = ?
`

func (q *Queries) GetClientById(ctx context.Context, id string) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientById, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Address,
		&i.AgentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
