// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: brolls.sql

package database

import (
	"context"
	"database/sql"
)

const createBrollMeta = `-- name: CreateBrollMeta :one
INSERT INTO brolls (id, user_id, title, description )
VALUES(
    ?,
    ?,
    ?,
    ?
)RETURNING id, title, description, user_id, s3_url, created_at, updated_at
`

type CreateBrollMetaParams struct {
	ID          string
	UserID      string
	Title       string
	Description sql.NullString
}

func (q *Queries) CreateBrollMeta(ctx context.Context, arg CreateBrollMetaParams) (Broll, error) {
	row := q.db.QueryRowContext(ctx, createBrollMeta,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Description,
	)
	var i Broll
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.S3Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBroll = `-- name: DeleteBroll :one
DELETE FROM brolls WHERE id = ? AND user_id = ? RETURNING id, title, description, user_id, s3_url, created_at, updated_at
`

type DeleteBrollParams struct {
	ID     string
	UserID string
}

func (q *Queries) DeleteBroll(ctx context.Context, arg DeleteBrollParams) (Broll, error) {
	row := q.db.QueryRowContext(ctx, deleteBroll, arg.ID, arg.UserID)
	var i Broll
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.S3Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBrollById = `-- name: GetBrollById :one
SELECT id, title, description, user_id, s3_url, created_at, updated_at FROM brolls WHERE id = ?
`

func (q *Queries) GetBrollById(ctx context.Context, id string) (Broll, error) {
	row := q.db.QueryRowContext(ctx, getBrollById, id)
	var i Broll
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.S3Url,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBrollByUser = `-- name: GetBrollByUser :many
SELECT id, title, description, user_id, s3_url, created_at, updated_at FROM brolls WHERE user_id = ?
`

func (q *Queries) GetBrollByUser(ctx context.Context, userID string) ([]Broll, error) {
	rows, err := q.db.QueryContext(ctx, getBrollByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Broll
	for rows.Next() {
		var i Broll
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.UserID,
			&i.S3Url,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBroll = `-- name: UpdateBroll :exec
UPDATE brolls
SET
    title = ?,
    description = ?,
    user_id = ?,
    s3_url = ?
WHERE id = ?
`

type UpdateBrollParams struct {
	Title       string
	Description sql.NullString
	UserID      string
	S3Url       sql.NullString
	ID          string
}

func (q *Queries) UpdateBroll(ctx context.Context, arg UpdateBrollParams) error {
	_, err := q.db.ExecContext(ctx, updateBroll,
		arg.Title,
		arg.Description,
		arg.UserID,
		arg.S3Url,
		arg.ID,
	)
	return err
}
