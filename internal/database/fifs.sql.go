// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: fifs.sql

package database

import (
	"context"
	"database/sql"
)

const createFifMeta = `-- name: CreateFifMeta :one
INSERT INTO fifs (id, user_id, title, description )
VALUES(
    ?,
    ?,
    ?,
    ?
)RETURNING id, title, description, user_id, s3_url, audio_s3, created_at, updated_at
`

type CreateFifMetaParams struct {
	ID          string
	UserID      string
	Title       string
	Description sql.NullString
}

func (q *Queries) CreateFifMeta(ctx context.Context, arg CreateFifMetaParams) (Fif, error) {
	row := q.db.QueryRowContext(ctx, createFifMeta,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Description,
	)
	var i Fif
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.S3Url,
		&i.AudioS3,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFifById = `-- name: GetFifById :one
SELECT id, title, description, user_id, s3_url, audio_s3, created_at, updated_at FROM fifs WHERE id = ?
`

func (q *Queries) GetFifById(ctx context.Context, id string) (Fif, error) {
	row := q.db.QueryRowContext(ctx, getFifById, id)
	var i Fif
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.S3Url,
		&i.AudioS3,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getFifsByUser = `-- name: GetFifsByUser :many
SELECT id, title, description, user_id, s3_url, audio_s3, created_at, updated_at FROM fifs WHERE user_id = ?
`

func (q *Queries) GetFifsByUser(ctx context.Context, userID string) ([]Fif, error) {
	rows, err := q.db.QueryContext(ctx, getFifsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Fif
	for rows.Next() {
		var i Fif
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.UserID,
			&i.S3Url,
			&i.AudioS3,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setFifAudioUrl = `-- name: SetFifAudioUrl :one
UPDATE fifs SET audio_s3 = ?
WHERE id = ?
RETURNING id, title, description, user_id, s3_url, audio_s3, created_at, updated_at
`

type SetFifAudioUrlParams struct {
	AudioS3 sql.NullString
	ID      string
}

func (q *Queries) SetFifAudioUrl(ctx context.Context, arg SetFifAudioUrlParams) (Fif, error) {
	row := q.db.QueryRowContext(ctx, setFifAudioUrl, arg.AudioS3, arg.ID)
	var i Fif
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.S3Url,
		&i.AudioS3,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setFifUrl = `-- name: SetFifUrl :one
UPDATE fifs SET s3_url= ?
WHERE id = ?
RETURNING id, title, description, user_id, s3_url, audio_s3, created_at, updated_at
`

type SetFifUrlParams struct {
	S3Url sql.NullString
	ID    string
}

func (q *Queries) SetFifUrl(ctx context.Context, arg SetFifUrlParams) (Fif, error) {
	row := q.db.QueryRowContext(ctx, setFifUrl, arg.S3Url, arg.ID)
	var i Fif
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.S3Url,
		&i.AudioS3,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateFif = `-- name: UpdateFif :one
UPDATE fifs
SET
    title = ?,
    description = ?,
    user_id = ?,
    s3_url = ?
WHERE id = ?
RETURNING id, title, description, user_id, s3_url, audio_s3, created_at, updated_at
`

type UpdateFifParams struct {
	Title       string
	Description sql.NullString
	UserID      string
	S3Url       sql.NullString
	ID          string
}

func (q *Queries) UpdateFif(ctx context.Context, arg UpdateFifParams) (Fif, error) {
	row := q.db.QueryRowContext(ctx, updateFif,
		arg.Title,
		arg.Description,
		arg.UserID,
		arg.S3Url,
		arg.ID,
	)
	var i Fif
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.UserID,
		&i.S3Url,
		&i.AudioS3,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
