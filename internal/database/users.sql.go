// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, username, email, password_hash, avatar_url, voice_url, is_admin)
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
)
RETURNING id, username, email, password_hash, avatar_url, voice_url, is_admin, created_at, updated_at
`

type CreateUserParams struct {
	ID           string
	Username     string
	Email        string
	PasswordHash string
	AvatarUrl    sql.NullString
	VoiceUrl     sql.NullString
	IsAdmin      int64
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.PasswordHash,
		arg.AvatarUrl,
		arg.VoiceUrl,
		arg.IsAdmin,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.AvatarUrl,
		&i.VoiceUrl,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, password_hash, avatar_url, voice_url, is_admin, created_at, updated_at FROM users WHERE  email = ?
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.AvatarUrl,
		&i.VoiceUrl,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, username, email, password_hash, avatar_url, voice_url, is_admin, created_at, updated_at FROM users WHERE id = ?
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.AvatarUrl,
		&i.VoiceUrl,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const setUserAvatarID = `-- name: SetUserAvatarID :one
UPDATE users SET avatar_url = ? WHERE id = ? RETURNING id, username, email, password_hash, avatar_url, voice_url, is_admin, created_at, updated_at
`

type SetUserAvatarIDParams struct {
	AvatarUrl sql.NullString
	ID        string
}

func (q *Queries) SetUserAvatarID(ctx context.Context, arg SetUserAvatarIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, setUserAvatarID, arg.AvatarUrl, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.AvatarUrl,
		&i.VoiceUrl,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
